/*package com.thinking.machines.library.bl;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
public class AuthorModel extends AbstractTableModel
{
private IndexTree authors;
private String[] title={"S.No","Author"};
public void initialiseDataStructure()
{
try
{
com.thinking.machines.library.dl.AuthorDAOInterface authorDAO=new com.thinking.machines.library.dl.AuthorDAO(); 
LinkedList<com.thinking.machines.library.dl.AuthorInterface> dlAuthorsLinkedList=authorDAO.getAll(com.thinking.machines.library.dl.AuthorInterface.NAME);
authors=new IndexTree();
AuthorInterface author;
for(com.thinking.machines.library.dl.AuthorInterface dlAuthor:dlAuthorsLinkedList)
{
author=new Author();
author.setName(dlAuthor.getName());
author.setCode(dlAuthor.getCode());
authors.add(author);
}
}catch(com.thinking.machines.library.dl.DAOException daoException)
{
System.out.println(daoException);
}
}
public int middle(Vector<String> authors,int lb,int ub,String data)
{
if(ub<=lb) return (data.compareTo(authors.get(lb))>0)?lb+1:lb;
int mid=(lb+ub)/2;
int weight=data.compareTo(authors.get(mid));
if(weight==0) return mid+1;
if(weight>0) return middle(authors,mid+1,ub,data);
if(weight<0) return middle(authors,lb,mid-1,data);
return -1;
}
public int binarySearch(Vector<String> authors,int lb,int ub,String data)
{
if(ub>=lb)
{
int mid=(ub+lb)/2;
int weight=data.compareTo(authors.get(mid));
if(weight==0) return mid;
if(weight>0) return binarySearch(authors,mid+1,ub,data);
if(weight<0) return binarySearch(authors,lb,mid-1,data);
}
return -1;
}
public AuthorModel() 
{
this.initialiseDataStructure();
}
public int getColumnCount()
{
return title.length;
}
public String getColumnName(int i)
{
return title[i];
}
public int getRowCount()
{
return authors.size();
}
public boolean isCellEditable(int r,int c)
{
return false;
}
public Object getValueAt(int r,int c)
{
if(c==0) return r+1;
return authors.get(r).getName();
}
public Class getColumnClass(int columnIndex)
{
Class c=null;
try
{
if(columnIndex==0) c=Class.forName("java.lang.Integer");
if(columnIndex==1) c=Class.forName("java.lang.String");
}catch(ClassNotFoundException cnfe){}
return c;
}
public void add(AuthorInterface authorInterface) throws BLException
{
BLException blException;
if(authorInterface==null)
{
blException=new BLException();
blException.addException("Author","Author Required");
throw blException;
}
if(authorInterface.getName()==null || authorInterface.getName().trim().length()==0)
{
blException=new BLException();
blException.addException("Name","Name Required");
throw blException;
}
if(authors.contains(new Author(0,authorInterface.getName()))) 
{
blException=new BLException();
blException.addException("Name","AlreadyExists");
throw blException;
}
try
{
com.thinking.machines.library.dl.AuthorInterface vAuthor=new com.thinking.machines.library.dl.Author();
vAuthor.setName(authorInterface.getName());
new com.thinking.machines.library.dl.AuthorDAO().add(vAuthor);
authorInterface.setCode(vAuthor.getCode());
authors.add(authorInterface);
fireTableDataChanged();
}catch(com.thinking.machines.library.dl.DAOException daoException)
{
blException=new BLException();
blException.addException("author",daoException.getMessage());
throw blException;
}
}
public void update(AuthorInterface authorInterface) throws BLException
{
BLException blException;
if(authorInterface==null)
{
blException=new BLException();
blException.addException("Author","Author required");
throw blException;
}
if(authorInterface.getName()==null || authorInterface.getName().trim().length()==0)
{
blException=new BLException();
blException.addException("Name","Name Required");
throw blException;
}
if(this.binarySearch(authors,0,authors.size()-1,authorInterface.getName())!=-1)
{
if(authors.indexOf(authorInterface.getName())!=keys.indexOf(authorInterface.getCode()))
{
blException=new BLException();
blException.addException("Name","Already Exists");
throw blException;
}
}
if(!keys.contains(authorInterface.getCode()))
{
blException=new BLException();
blException.addException("Code","Invalid Code");
throw blException;
}
try
{
com.thinking.machines.library.dl.AuthorInterface vAuthor=new com.thinking.machines.library.dl.Author();
vAuthor.setCode(authorInterface.getCode());
vAuthor.setName(authorInterface.getName());
new com.thinking.machines.library.dl.AuthorDAO().update(vAuthor);
int index=this.middle(authors,0,authors.size()-1,authorInterface.getName());
authors.remove(keys.indexOf(authorInterface.getCode()));
authors.add(authorInterface);
fireTableDataChanged();
}catch(com.thinking.machines.library.dl.DAOException daoException)
{
blException=new BLException();
blException.addException("author",daoException.getMessage());
throw blException;
}
}
public void remove(int code) throws BLException
{
BLException blException;
if(!keys.contains(code))
{
blException=new BLException();
blException.addException("Code","Invalid Code");
throw blException;
}
try
{
new com.thinking.machines.library.dl.AuthorDAO().remove(code);
authors.remove(keys.indexOf(code));
keys.remove(keys.indexOf(code));
fireTableDataChanged();
}catch(com.thinking.machines.library.dl.DAOException daoException)
{
blException=new BLException();
blException.addException("author",daoException.getMessage());
throw blException;
}
}
}
public int getAuthorIndexByName(String name,boolean compareLeft,boolean compareInCaseSensitive) 
{
Iterator itr=authors.iterator();
String s;
if(compareLeft && compareInCaseSensitive)
{
while(itr.hasNext())
{
s=itr.next();
if(s.startsWith(name)) return s;
}
}
if(compareLeft && compareInCaseSensitive==false)
{
while(itr.hasNext())
{
s=itr.next();
if(s.toUpperCase().startsWith(name.toUpperCase())) return s;
}
}
if(compareLeft==false && compareInCaseSensitive)
{
while(itr.hasNext())
{
s=itr.next();
if(s.equals(name)) return s;
}
}
if(compareLeft==false && compareInCaseSensitive==false)
{
while(itr.hasNext())
{
s=itr.next();
if(s.toUpperCase().equals(name.toUpperCase())) return s;
}
}
}


public AuthorInterface getAuthorAt(int index)
{
}
public AuthorInterface getAuthorByName(String name,boolean compareLeft,boolean compareInCaseSensitive) throws BLException
{
}
PUBLIC INT GETINDEXOF(AUTHORINTERFACE AUTHOR) THROWS BLEXCEPTION
{
}

Note:-
We cannot use data structure 'VECTOR' beacause
 Adding and removing elements from any other position is expensive â€” Linear: O(n-i), where n is the number of elements and i is the index of the element added or removed. These operations are more expensive because you have to shift all elements at index i and higher over by one element.
Q:-How does a vector grow internally in JAVA?
Ans:-A vector will grow based on its capacityIncrement value. New length of vector is calculated as given below

newLength = capacityIncrement == 0 ? existingSize * 2 : existingSize + capacityIncrement
...................................................................................................*/

// AuthorModel implementation in LinkedList


package com.thinking.machines.library.bl;
import java.util.*;
import javax.swing.table.*;
public class AuthorModel extends AbstractTableModel
{
private String [] title={"S.No.","Author"};
private LinkedList<AuthorInterface> authorsLinkedList;
public AuthorModel()
{
initializeDataStructure();
}
public void initializeDataStructure()
{
LinkedList<com.thinking.machines.library.dl.AuthorInterface> dlAuthorsLinkedList;
com.thinking.machines.library.dl.AuthorDAOInterface authorDAO;
authorDAO=new com.thinking.machines.library.dl.AuthorDAO();
try
{
dlAuthorsLinkedList=authorDAO.getAll(com.thinking.machines.library.dl.AuthorInterface.NAME);
authorsLinkedList=new LinkedList<AuthorInterface>();
AuthorInterface authorInterface;
for(com.thinking.machines.library.dl.AuthorInterface dlAuthor:dlAuthorsLinkedList)
{
authorInterface=new Author();
authorInterface.setCode(dlAuthor.getCode());
authorInterface.setName(dlAuthor.getName());
authorsLinkedList.add(authorInterface);
}
}catch(com.thinking.machines.library.dl.DAOException daoException)
{
System.out.println(daoException);
authorsLinkedList=new LinkedList<AuthorInterface>();
}
}
public int getRowCount()
{
return authorsLinkedList.size();
}
public int getColumnCount()
{
return title.length;
}
public String getColumnName(int columnIndex)
{
return title[columnIndex];
}
public boolean isCellEditable(int rowIndex,int columnIndex)
{
return false;
}
public Object getValueAt(int rowIndex,int columnIndex)
{
if(columnIndex==0) return rowIndex+1;
return authorsLinkedList.get(rowIndex).getName();
}
public Class getColumnClass(int columnIndex)
{
if(columnIndex==0) return Integer.class;
return String.class;
}
// application specific methods
public void addAuthor(AuthorInterface authorInterface) throws BLException
{
BLException blException;
if(authorInterface==null) throw new BLException("Author Required");
if(authorInterface.getName()==null || authorInterface.getName().trim().length()==0) throw new BLException("Name Required");
for(AuthorInterface vAuthorInterface:authorsLinkedList)
{
if(vAuthorInterface.getName().equalsIgnoreCase(authorInterface.getName()))
{
throw new BLException("Author : "+authorInterface.getName()+" exists.");
}
}
com.thinking.machines.library.dl.AuthorInterface dlAuthorInterface;
dlAuthorInterface=new com.thinking.machines.library.dl.Author();
dlAuthorInterface.setName(authorInterface.getName());
try
{
new com.thinking.machines.library.dl.AuthorDAO().add(dlAuthorInterface);    
authorInterface.setCode(dlAuthorInterface.getCode());
int e=0;
while(e<authorsLinkedList.size())
{
if(authorsLinkedList.get(e).getName().toUpperCase().compareTo(authorInterface.getName().toUpperCase())>0)
{
break;
}
e++;
}
authorsLinkedList.add(e,authorInterface);
fireTableDataChanged();
}catch(com.thinking.machines.library.dl.DAOException daoException)
{
throw new BLException(daoException.getMessage());
}
}
public void updateAuthor(AuthorInterface authorInterface) throws BLException
{
if(authorInterface==null) throw new BLException("Author Required");
if(authorInterface.getName()==null || authorInterface.getName().trim().length()==0) throw new BLException("Name Required");
boolean foundCode=false;
int authorIndex=0;
for(AuthorInterface vAuthorInterface:authorsLinkedList)
{
if(vAuthorInterface.getCode()==authorInterface.getCode())
{
foundCode=true;
break;
}
authorIndex++;
}
if(foundCode==false)
{
throw new BLException("Invalid author code : "+authorInterface.getCode());
}
boolean foundName=false;
for(AuthorInterface vAuthorInterface:authorsLinkedList)
{
if(vAuthorInterface.getCode()!=authorInterface.getCode() && vAuthorInterface.getName().equalsIgnoreCase(authorInterface.getName()))
{
foundName=true;
break;
}
}
if(foundName)
{
throw new BLException("Author : "+authorInterface.getName()+" exists.");
}
com.thinking.machines.library.dl.AuthorInterface dlAuthorInterface;
dlAuthorInterface=new com.thinking.machines.library.dl.Author();
dlAuthorInterface.setCode(authorInterface.getCode());
dlAuthorInterface.setName(authorInterface.getName());
try
{
new com.thinking.machines.library.dl.AuthorDAO().update(dlAuthorInterface);
authorsLinkedList.remove(authorIndex);
int e=0;
while(e<authorsLinkedList.size())
{
if(authorsLinkedList.get(e).getName().toUpperCase().compareTo(authorInterface.getName().toUpperCase())>0)
{
break;
}
e++;
}
authorsLinkedList.add(e,authorInterface);
fireTableDataChanged();
}catch(com.thinking.machines.library.dl.DAOException daoException)
{
throw new BLException(daoException.getMessage());
}
}
public void removeAuthor(int code) throws BLException
{
boolean foundCode=false;
int authorIndex=0;
for(AuthorInterface vAuthorInterface:authorsLinkedList)
{
if(vAuthorInterface.getCode()==code)
{
foundCode=true;
break;
}
authorIndex++;
}
if(foundCode==false)
{
throw new BLException("Invalid author code : "+code);
}
try
{
new com.thinking.machines.library.dl.AuthorDAO().remove(code);
authorsLinkedList.remove(authorIndex);
fireTableDataChanged();
}catch(com.thinking.machines.library.dl.DAOException daoException)
{
throw new BLException(daoException.getMessage());
}
}
public int getIndexOf(AuthorInterface authorInterface) throws BLException
{
boolean foundCode=false;
int authorIndex=0;
for(AuthorInterface vAuthorInterface:authorsLinkedList)
{
if(vAuthorInterface.getCode()==authorInterface.getCode())
{
foundCode=true;
break;
}
authorIndex++;
}
if(foundCode==false)
{
throw new BLException("Invalid author code : "+authorInterface.getCode());
}
return authorIndex;
}
public AuthorInterface getAuthorAt(int index) throws BLException
{
if(index<0 || index>=authorsLinkedList.size()) throw new BLException("Index out of bounds : "+index);
return authorsLinkedList.get(index);
}
public AuthorInterface getAuthorByName(String name,boolean compareLeft,boolean compareInCaseSensitive) throws BLException
{
if(compareLeft && compareInCaseSensitive)
{
AuthorInterface authorInterface;
String vName;
for(int i=0;i<authorsLinkedList.size();i++)
{
authorInterface=authorsLinkedList.get(i);
vName=authorInterface.getName();
if(vName.toUpperCase().startsWith(name.toUpperCase())) return authorInterface;
}
}

if(compareLeft && compareInCaseSensitive==false)
{
AuthorInterface authorInterface;
String vName;
for(int i=0;i<authorsLinkedList.size();i++)
{
authorInterface=authorsLinkedList.get(i);
vName=authorInterface.getName();
if(vName.startsWith(name)) return authorInterface;
}
}

if(compareLeft==false && compareInCaseSensitive)
{
AuthorInterface authorInterface;
String vName;
for(int i=0;i<authorsLinkedList.size();i++)
{
authorInterface=authorsLinkedList.get(i);
vName=authorInterface.getName();
if(vName.equalsIgnoreCase(name)) return authorInterface;
}
}
if(compareLeft==false && compareInCaseSensitive==false)
{
AuthorInterface authorInterface;
String vName;
for(int i=0;i<authorsLinkedList.size();i++)
{
authorInterface=authorsLinkedList.get(i);
vName=authorInterface.getName();
if(vName.equals(name)) return authorInterface;
}
}
throw new BLException("Invalid name : "+name);
}
public int getAuthorIndexByName(String name,boolean compareLeft,boolean compareInCaseSensitive) throws BLException
{
if(compareLeft && compareInCaseSensitive)
{
AuthorInterface authorInterface;
String vName;
for(int i=0;i<authorsLinkedList.size();i++)
{
authorInterface=authorsLinkedList.get(i);
vName=authorInterface.getName();
if(vName.toUpperCase().startsWith(name.toUpperCase())) return i;
}
}

if(compareLeft && compareInCaseSensitive==false)
{
AuthorInterface authorInterface;
String vName;
for(int i=0;i<authorsLinkedList.size();i++)
{
authorInterface=authorsLinkedList.get(i);
vName=authorInterface.getName();
if(vName.startsWith(name)) return i;
}
}

if(compareLeft==false && compareInCaseSensitive)
{
AuthorInterface authorInterface;
String vName;
for(int i=0;i<authorsLinkedList.size();i++)
{
authorInterface=authorsLinkedList.get(i);
vName=authorInterface.getName();
if(vName.equalsIgnoreCase(name)) return i;
}
}
if(compareLeft==false && compareInCaseSensitive==false)
{
AuthorInterface authorInterface;
String vName;
for(int i=0;i<authorsLinkedList.size();i++)
{
authorInterface=authorsLinkedList.get(i);
vName=authorInterface.getName();
if(vName.equals(name)) return i;
}
}
throw new BLException("Not yet implemented");
}
}
